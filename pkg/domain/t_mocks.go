// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountService creates a new instance of MockAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountService {
	mock := &MockAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountService is an autogenerated mock type for the AccountService type
type MockAccountService struct {
	mock.Mock
}

type MockAccountService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountService) EXPECT() *MockAccountService_Expecter {
	return &MockAccountService_Expecter{mock: &_m.Mock}
}

// ComparePassword provides a mock function for the type MockAccountService
func (_mock *MockAccountService) ComparePassword(password string, hash string) (bool, error) {
	ret := _mock.Called(password, hash)

	if len(ret) == 0 {
		panic("no return value specified for ComparePassword")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return returnFunc(password, hash)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(password, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(password, hash)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_ComparePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComparePassword'
type MockAccountService_ComparePassword_Call struct {
	*mock.Call
}

// ComparePassword is a helper method to define mock.On call
//   - password string
//   - hash string
func (_e *MockAccountService_Expecter) ComparePassword(password interface{}, hash interface{}) *MockAccountService_ComparePassword_Call {
	return &MockAccountService_ComparePassword_Call{Call: _e.mock.On("ComparePassword", password, hash)}
}

func (_c *MockAccountService_ComparePassword_Call) Run(run func(password string, hash string)) *MockAccountService_ComparePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountService_ComparePassword_Call) Return(b bool, err error) *MockAccountService_ComparePassword_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockAccountService_ComparePassword_Call) RunAndReturn(run func(password string, hash string) (bool, error)) *MockAccountService_ComparePassword_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function for the type MockAccountService
func (_mock *MockAccountService) GenerateToken(account *Account) (string, error) {
	ret := _mock.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*Account) (string, error)); ok {
		return returnFunc(account)
	}
	if returnFunc, ok := ret.Get(0).(func(*Account) string); ok {
		r0 = returnFunc(account)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*Account) error); ok {
		r1 = returnFunc(account)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockAccountService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - account *Account
func (_e *MockAccountService_Expecter) GenerateToken(account interface{}) *MockAccountService_GenerateToken_Call {
	return &MockAccountService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", account)}
}

func (_c *MockAccountService_GenerateToken_Call) Run(run func(account *Account)) *MockAccountService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Account
		if args[0] != nil {
			arg0 = args[0].(*Account)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountService_GenerateToken_Call) Return(s string, err error) *MockAccountService_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAccountService_GenerateToken_Call) RunAndReturn(run func(account *Account) (string, error)) *MockAccountService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function for the type MockAccountService
func (_mock *MockAccountService) HashPassword(password string) (string, error) {
	ret := _mock.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(password)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type MockAccountService_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - password string
func (_e *MockAccountService_Expecter) HashPassword(password interface{}) *MockAccountService_HashPassword_Call {
	return &MockAccountService_HashPassword_Call{Call: _e.mock.On("HashPassword", password)}
}

func (_c *MockAccountService_HashPassword_Call) Run(run func(password string)) *MockAccountService_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountService_HashPassword_Call) Return(s string, err error) *MockAccountService_HashPassword_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAccountService_HashPassword_Call) RunAndReturn(run func(password string) (string, error)) *MockAccountService_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// SendPasswordResetEmail provides a mock function for the type MockAccountService
func (_mock *MockAccountService) SendPasswordResetEmail(email string, token string) error {
	ret := _mock.Called(email, token)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordResetEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(email, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountService_SendPasswordResetEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPasswordResetEmail'
type MockAccountService_SendPasswordResetEmail_Call struct {
	*mock.Call
}

// SendPasswordResetEmail is a helper method to define mock.On call
//   - email string
//   - token string
func (_e *MockAccountService_Expecter) SendPasswordResetEmail(email interface{}, token interface{}) *MockAccountService_SendPasswordResetEmail_Call {
	return &MockAccountService_SendPasswordResetEmail_Call{Call: _e.mock.On("SendPasswordResetEmail", email, token)}
}

func (_c *MockAccountService_SendPasswordResetEmail_Call) Run(run func(email string, token string)) *MockAccountService_SendPasswordResetEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountService_SendPasswordResetEmail_Call) Return(err error) *MockAccountService_SendPasswordResetEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountService_SendPasswordResetEmail_Call) RunAndReturn(run func(email string, token string) error) *MockAccountService_SendPasswordResetEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockAccountService
func (_mock *MockAccountService) ValidateToken(token string) (uint, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 uint
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (uint, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) uint); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(uint)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAccountService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token string
func (_e *MockAccountService_Expecter) ValidateToken(token interface{}) *MockAccountService_ValidateToken_Call {
	return &MockAccountService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockAccountService_ValidateToken_Call) Run(run func(token string)) *MockAccountService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountService_ValidateToken_Call) Return(v uint, err error) *MockAccountService_ValidateToken_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockAccountService_ValidateToken_Call) RunAndReturn(run func(token string) (uint, error)) *MockAccountService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountRepository creates a new instance of MockAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRepository {
	mock := &MockAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountRepository is an autogenerated mock type for the AccountRepository type
type MockAccountRepository struct {
	mock.Mock
}

type MockAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRepository) EXPECT() *MockAccountRepository_Expecter {
	return &MockAccountRepository_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) CreateAccount(account *Account) (*Account, error) {
	ret := _mock.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*Account) (*Account, error)); ok {
		return returnFunc(account)
	}
	if returnFunc, ok := ret.Get(0).(func(*Account) *Account); ok {
		r0 = returnFunc(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*Account) error); ok {
		r1 = returnFunc(account)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type MockAccountRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - account *Account
func (_e *MockAccountRepository_Expecter) CreateAccount(account interface{}) *MockAccountRepository_CreateAccount_Call {
	return &MockAccountRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", account)}
}

func (_c *MockAccountRepository_CreateAccount_Call) Run(run func(account *Account)) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Account
		if args[0] != nil {
			arg0 = args[0].(*Account)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_CreateAccount_Call) Return(account1 *Account, err error) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Return(account1, err)
	return _c
}

func (_c *MockAccountRepository_CreateAccount_Call) RunAndReturn(run func(account *Account) (*Account, error)) *MockAccountRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccount provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) DeleteAccount(id uint) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uint) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_DeleteAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccount'
type MockAccountRepository_DeleteAccount_Call struct {
	*mock.Call
}

// DeleteAccount is a helper method to define mock.On call
//   - id uint
func (_e *MockAccountRepository_Expecter) DeleteAccount(id interface{}) *MockAccountRepository_DeleteAccount_Call {
	return &MockAccountRepository_DeleteAccount_Call{Call: _e.mock.On("DeleteAccount", id)}
}

func (_c *MockAccountRepository_DeleteAccount_Call) Run(run func(id uint)) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_DeleteAccount_Call) Return(err error) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_DeleteAccount_Call) RunAndReturn(run func(id uint) error) *MockAccountRepository_DeleteAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByEmail provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetAccountByEmail(email string) (*Account, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByEmail")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*Account, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *Account); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetAccountByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByEmail'
type MockAccountRepository_GetAccountByEmail_Call struct {
	*mock.Call
}

// GetAccountByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockAccountRepository_Expecter) GetAccountByEmail(email interface{}) *MockAccountRepository_GetAccountByEmail_Call {
	return &MockAccountRepository_GetAccountByEmail_Call{Call: _e.mock.On("GetAccountByEmail", email)}
}

func (_c *MockAccountRepository_GetAccountByEmail_Call) Run(run func(email string)) *MockAccountRepository_GetAccountByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetAccountByEmail_Call) Return(account *Account, err error) *MockAccountRepository_GetAccountByEmail_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountRepository_GetAccountByEmail_Call) RunAndReturn(run func(email string) (*Account, error)) *MockAccountRepository_GetAccountByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountByID provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) GetAccountByID(id uint) (*Account, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint) (*Account, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uint) *Account); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_GetAccountByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountByID'
type MockAccountRepository_GetAccountByID_Call struct {
	*mock.Call
}

// GetAccountByID is a helper method to define mock.On call
//   - id uint
func (_e *MockAccountRepository_Expecter) GetAccountByID(id interface{}) *MockAccountRepository_GetAccountByID_Call {
	return &MockAccountRepository_GetAccountByID_Call{Call: _e.mock.On("GetAccountByID", id)}
}

func (_c *MockAccountRepository_GetAccountByID_Call) Run(run func(id uint)) *MockAccountRepository_GetAccountByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_GetAccountByID_Call) Return(account *Account, err error) *MockAccountRepository_GetAccountByID_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountRepository_GetAccountByID_Call) RunAndReturn(run func(id uint) (*Account, error)) *MockAccountRepository_GetAccountByID_Call {
	_c.Call.Return(run)
	return _c
}

// LogAccountActivity provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) LogAccountActivity(accountID uint, activity string) error {
	ret := _mock.Called(accountID, activity)

	if len(ret) == 0 {
		panic("no return value specified for LogAccountActivity")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = returnFunc(accountID, activity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountRepository_LogAccountActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogAccountActivity'
type MockAccountRepository_LogAccountActivity_Call struct {
	*mock.Call
}

// LogAccountActivity is a helper method to define mock.On call
//   - accountID uint
//   - activity string
func (_e *MockAccountRepository_Expecter) LogAccountActivity(accountID interface{}, activity interface{}) *MockAccountRepository_LogAccountActivity_Call {
	return &MockAccountRepository_LogAccountActivity_Call{Call: _e.mock.On("LogAccountActivity", accountID, activity)}
}

func (_c *MockAccountRepository_LogAccountActivity_Call) Run(run func(accountID uint, activity string)) *MockAccountRepository_LogAccountActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountRepository_LogAccountActivity_Call) Return(err error) *MockAccountRepository_LogAccountActivity_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountRepository_LogAccountActivity_Call) RunAndReturn(run func(accountID uint, activity string) error) *MockAccountRepository_LogAccountActivity_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function for the type MockAccountRepository
func (_mock *MockAccountRepository) UpdateAccount(account *Account) (*Account, error) {
	ret := _mock.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*Account) (*Account, error)); ok {
		return returnFunc(account)
	}
	if returnFunc, ok := ret.Get(0).(func(*Account) *Account); ok {
		r0 = returnFunc(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*Account) error); ok {
		r1 = returnFunc(account)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountRepository_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type MockAccountRepository_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - account *Account
func (_e *MockAccountRepository_Expecter) UpdateAccount(account interface{}) *MockAccountRepository_UpdateAccount_Call {
	return &MockAccountRepository_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", account)}
}

func (_c *MockAccountRepository_UpdateAccount_Call) Run(run func(account *Account)) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Account
		if args[0] != nil {
			arg0 = args[0].(*Account)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAccountRepository_UpdateAccount_Call) Return(account1 *Account, err error) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Return(account1, err)
	return _c
}

func (_c *MockAccountRepository_UpdateAccount_Call) RunAndReturn(run func(account *Account) (*Account, error)) *MockAccountRepository_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}
